#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Debug Extra√ß√£o de Imagens
Testa especificamente a extra√ß√£o de imagens das tabelas detectadas
"""

import fitz
import os
from PyQt5.QtGui import QImage

def debug_image_extraction():
    """Testa a extra√ß√£o de imagem para a tabela perfeita da p√°gina 148"""
    
    print("üñºÔ∏è DEBUG EXTRA√á√ÉO DE IMAGENS")
    print("=" * 50)
    
    pdf_path = os.path.join("LivrosPDF", "Medicina_de_emergencia_abordagem_pratica.pdf")
    
    if not os.path.exists(pdf_path):
        print("‚ùå PDF n√£o encontrado")
        return
    
    try:
        # Dados da tabela perfeita (do nosso teste anterior)
        table_data = {
            'page': 148,
            'bbox': (66, 608, 742, 467),  # bbox refinado do detector
            'confidence': 0.840
        }
        
        print(f"üìÑ Extraindo tabela da p√°gina {table_data['page']}")
        print(f"üìê BBox: {table_data['bbox']}")
        
        # Abrir PDF
        doc = fitz.open(pdf_path)
        page_num = table_data['page']
        bbox = table_data['bbox']
        
        # Carregar p√°gina
        page = doc.load_page(page_num - 1)  # PyMuPDF usa √≠ndice 0
        
        print(f"üìè Dimens√µes da p√°gina: {page.rect}")
        
        # Criar ret√¢ngulo para extra√ß√£o
        print(f"\nüîç CRIANDO RET√ÇNGULO:")
        print(f"   bbox original: {bbox}")
        print(f"   x1, y1: {bbox[0]}, {bbox[1]}")
        print(f"   x2, y2: {bbox[0] + bbox[2]}, {bbox[1] + bbox[3]}")
        
        rect = fitz.Rect(bbox[0], bbox[1], bbox[0] + bbox[2], bbox[1] + bbox[3])
        print(f"   fitz.Rect: {rect}")
        
        # Verificar se o ret√¢ngulo est√° dentro da p√°gina
        page_rect = page.rect
        print(f"\nüìè VERIFICA√á√ÉO DE LIMITES:")
        print(f"   P√°gina: {page_rect}")
        print(f"   Tabela: {rect}")
        print(f"   Dentro da p√°gina: {rect in page_rect}")
        
        if not rect in page_rect:
            print(f"   ‚ö†Ô∏è AVISO: Ret√¢ngulo fora dos limites da p√°gina!")
            # Ajustar para os limites da p√°gina
            rect = rect & page_rect
            print(f"   üîß Ret√¢ngulo ajustado: {rect}")
        
        # Extrair pixmap
        print(f"\nüñºÔ∏è EXTRAINDO PIXMAP:")
        try:
            pix = page.get_pixmap(clip=rect, dpi=150)
            print(f"   Pixmap criado: {pix.width}x{pix.height}")
            
            if pix.width == 0 or pix.height == 0:
                print(f"   ‚ùå ERRO: Pixmap vazio!")
                
                # Tentar sem clipping
                print(f"   üîÑ Tentando extrair p√°gina inteira...")
                pix_full = page.get_pixmap(dpi=150)
                print(f"   P√°gina completa: {pix_full.width}x{pix_full.height}")
                
                # Tentar com outro ret√¢ngulo
                print(f"   üîÑ Tentando ret√¢ngulo menor...")
                smaller_rect = fitz.Rect(100, 600, 600, 900)
                pix_small = page.get_pixmap(clip=smaller_rect, dpi=150)
                print(f"   Ret√¢ngulo menor: {pix_small.width}x{pix_small.height}")
                
            else:
                print(f"   ‚úÖ Pixmap v√°lido")
                
                # Converter para QImage
                print(f"\nüñºÔ∏è CONVERTENDO PARA QIMAGE:")
                img = QImage(pix.samples, pix.width, pix.height, pix.stride, QImage.Format_RGB888)
                
                if img.isNull():
                    print(f"   ‚ùå ERRO: QImage nula!")
                else:
                    print(f"   ‚úÖ QImage criada: {img.width()}x{img.height()}")
                    
                    # Salvar para teste
                    test_path = "debug_extraction_test.png"
                    success = img.save(test_path)
                    
                    if success:
                        print(f"   ‚úÖ Imagem salva: {test_path}")
                        
                        # Verificar tamanho do arquivo
                        if os.path.exists(test_path):
                            file_size = os.path.getsize(test_path)
                            print(f"   üìÅ Tamanho do arquivo: {file_size} bytes")
                            
                            if file_size == 0:
                                print(f"   ‚ùå ERRO: Arquivo vazio!")
                            else:
                                print(f"   ‚úÖ Arquivo v√°lido")
                        else:
                            print(f"   ‚ùå ERRO: Arquivo n√£o foi criado")
                    else:
                        print(f"   ‚ùå ERRO: Falha ao salvar imagem")
                        
                        # Tentar salvar como BMP
                        bmp_path = "debug_extraction_test.bmp"
                        bmp_success = img.save(bmp_path, "BMP")
                        print(f"   üîÑ Tentativa BMP: {'‚úÖ sucesso' if bmp_success else '‚ùå falha'}")
                
        except Exception as e:
            print(f"   ‚ùå ERRO ao extrair pixmap: {e}")
            import traceback
            traceback.print_exc()
        
        doc.close()
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # Inicializar aplica√ß√£o Qt para QImage
    from PyQt5.QtWidgets import QApplication
    import sys
    
    app = QApplication(sys.argv)
    debug_image_extraction()
    app.quit()

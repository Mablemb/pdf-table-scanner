#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste Final - Detector Real
Testa o detector real com as p√°ginas que sabemos ter tabelas
"""

import os
from opencv_table_detector import OpenCVTableDetector

def test_real_detector():
    """Testa o detector real com p√°ginas conhecidas"""
    
    print("üéØ TESTE FINAL - DETECTOR REAL")
    print("=" * 50)
    
    pdf_path = os.path.join("LivrosPDF", "Medicina_de_emergencia_abordagem_pratica.pdf")
    
    if not os.path.exists(pdf_path):
        print("‚ùå PDF n√£o encontrado")
        return
    
    try:
        # P√°ginas que confirmamos ter tabelas
        pages_with_tables = "97,148,185,186"
        
        print(f"üìÑ Testando p√°ginas: {pages_with_tables}")
        print("-" * 40)
        
        # Usar o detector real com as configura√ß√µes atuais
        detector = OpenCVTableDetector(pdf_path, pages=pages_with_tables, min_table_area=500)
        
        # Executar detec√ß√£o usando m√©todo run()
        import time
        from PyQt5.QtCore import pyqtSignal, QObject
        
        class TestReceiver(QObject):
            def __init__(self):
                super().__init__()
                self.results = []
                self.completed = False
                
            def receive_tables(self, tables):
                self.results = tables
                self.completed = True
                print(f"üìä RESULTADOS RECEBIDOS: {len(tables)} tabelas")
                
                for i, table in enumerate(tables):
                    page = table.get('page', 'N/A')
                    conf = table.get('confidence', 0)
                    bbox = table.get('bbox', 'N/A')
                    method = table.get('detection_method', 'N/A')
                    
                    print(f"   Tabela {i+1}:")
                    print(f"      P√°gina: {page}")
                    print(f"      Confian√ßa: {conf:.3f}")
                    print(f"      BBox: {bbox}")
                    print(f"      M√©todo: {method}")
                    print()
            
            def receive_progress(self, progress, message):
                print(f"   {progress}% - {message}")
            
            def receive_error(self, error):
                print(f"‚ùå Erro: {error}")
                self.completed = True
        
        # Configurar receptor de sinais
        receiver = TestReceiver()
        detector.tables_detected.connect(receiver.receive_tables)
        detector.progress_updated.connect(receiver.receive_progress)
        detector.error_occurred.connect(receiver.receive_error)
        
        print(f"üöÄ Iniciando detec√ß√£o...")
        
        # Executar em thread separada
        detector.run()
        
        # Aguardar alguns segundos para processamento
        max_wait = 30
        waited = 0
        while not receiver.completed and waited < max_wait:
            time.sleep(0.5)
            waited += 0.5
        
        if not receiver.completed:
            print(f"‚è∞ Timeout ap√≥s {max_wait}s")
            return
        
        print(f"\nüéØ AN√ÅLISE FINAL:")
        print(f"   Total de tabelas: {len(receiver.results)}")
        
        if len(receiver.results) > 0:
            avg_confidence = sum(t.get('confidence', 0) for t in receiver.results) / len(receiver.results)
            print(f"   Confian√ßa m√©dia: {avg_confidence:.3f}")
            
            pages_detected = set(t.get('page') for t in receiver.results)
            print(f"   P√°ginas com tabelas: {sorted(pages_detected)}")
            
            print(f"\n‚úÖ SUCESSO! Detector funcionando corretamente!")
        else:
            print(f"\n‚ùå PROBLEMA: Nenhuma tabela detectada")
            print("Verificar se h√° problema na configura√ß√£o ou nos sinais Qt")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # Inicializar aplica√ß√£o Qt para sinais
    from PyQt5.QtWidgets import QApplication
    import sys
    
    app = QApplication(sys.argv)
    test_real_detector()
    app.quit()
